<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://student-party.github.io/</id>
    <title>Gridea</title>
    <updated>2019-11-01T09:50:29.816Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://student-party.github.io/"/>
    <link rel="self" href="https://student-party.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://student-party.github.io//images/avatar.png</logo>
    <icon>https://student-party.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[待归档]]></title>
        <id>https://student-party.github.io//post/dai-gui-dang</id>
        <link href="https://student-party.github.io//post/dai-gui-dang">
        </link>
        <updated>2019-10-31T08:20:28.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<!-- more -->
<p>陈意: fastdfs存储文件系统部署  参考   https://blog.csdn.net/wufewu/article/details/84801600<br>
陈意: docker下的主从配置    文档：008--Docker搭建 MySQL.note<br>
链接：http://note.youdao.com/noteshare?id=54ed599f897aa62dfb5a1b70a7d0e477&amp;sub=00D749EED87A4E9BBD4E0DA3D2A0CA05</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CMD修改编码]]></title>
        <id>https://student-party.github.io//post/cmd-xiu-gai-bian-ma</id>
        <link href="https://student-party.github.io//post/cmd-xiu-gai-bian-ma">
        </link>
        <updated>2019-10-31T08:13:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code>chcp 65001  #修改为UTF-8编码
</code></pre>
<p>编码参数可参考:<a href="https://blog.csdn.net/iway_lch/article/details/50408796">点我</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Navicat12.1.8长期试用版]]></title>
        <id>https://student-party.github.io//post/navicat1218-chang-qi-shi-yong-ban</id>
        <link href="https://student-party.github.io//post/navicat1218-chang-qi-shi-yong-ban">
        </link>
        <updated>2019-10-31T01:59:59.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="首先">首先</h2>
<ol>
<li>安装Navicat，可官网直接下载安装</li>
<li>下载秘钥生成器：<a href="https://pan.baidu.com/s/1h3Vzv-OEgeKweOBq-tAH9Q%22">点我</a></li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h2 id="首先">首先</h2>
<ol>
<li>安装Navicat，可官网直接下载安装</li>
<li>下载秘钥生成器：<a href="https://pan.baidu.com/s/1h3Vzv-OEgeKweOBq-tAH9Q%22">点我</a></li>
</ol>
<!-- more -->
<h2 id="然后">然后</h2>
<ol>
<li>打开激活器</li>
<li>点击patch——指定软件安装路径</li>
<li>点击Generate<br>
<img src="http://file.happyjava.cn/picgo/20190605232956.png" alt=""></li>
<li>打开Navicat，复制注册码——粘贴——手动激活——复制请求代码——Generate——回到Navicat——完成<br>
<img src="http://file.happyjava.cn/picgo/20190605233035.png" alt=""><br>
<strong>注意</strong>：激活失败需卸载并将文件删除干净后重复以上操作即可</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于docker的主从库搭建]]></title>
        <id>https://student-party.github.io//post/ji-yu-docker-de-zhu-cong-ku-da-jian</id>
        <link href="https://student-party.github.io//post/ji-yu-docker-de-zhu-cong-ku-da-jian">
        </link>
        <updated>2019-10-28T09:38:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="入门">入门</h2>
<p>基于Docker的Mysql主从复制搭建</p>
<ol>
<li>首先安装docker</li>
<li>拉取mysql镜像：5.7版本</li>
<li>启动主从数据库容器</li>
</ol>
<pre><code>docker run -p 3339:3306 --name Maste -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7  # Master(主库)
docker run -p 3340:3306 --name Slave -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7   # Slave(从库)
</code></pre>
<p>启动后用可用数据库软件测试一下是否连通。</p>
<ul>
<li>配置Master</li>
</ul>
<ol>
<li>Master配置文件修改</li>
</ol>
<pre><code>docker exec -it 容器名 /bin/bash  #进入主库docker
apt-get update   #更新安装源
apt-get install -y vim   #安装vim
vim  /etc/mysql/my.cnf   #编辑my.cnf配置文件


[mysqld]
## 同一局域网内注意要唯一
server-id=100  
## 开启二进制日志功能，可以随便取（关键）
log-bin=mysql-bin
</code></pre>
<ol start="2">
<li>重启mysql容器。</li>
<li>进入主库创建数据库同步用户，并授予REPLICATION SLAVE权限和REPLICATION CLIENT权限，用于主从之间同步数据。</li>
</ol>
<pre><code>docker exec -it 主库容器名 /bin/bash  # 进入主库docker
mysql -uroot帐号  -p用户密码   # 登录入mysql
CREATE USER 'slave'@'%' IDENTIFIED BY '123456';   #创建用户名“slave”，密码“123456”的数据库用户。
GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';   #授予用户 slave REPLICATION SLAVE权限和REPLICATION CLIENT权限
</code></pre>
<ol start="4">
<li>查看File、Position字段值,并记录下来</li>
</ol>
<pre><code>show master status;
+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000001 |      617 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
</code></pre>
<ul>
<li>配置Slave</li>
</ul>
<ol>
<li>Slave配置文件修改</li>
</ol>
<pre><code>docker exec -it 容器名 /bin/bash  #
apt-get update
apt-get install -y vim
vim  /etc/mysql/my.cnf

[mysqld]
## 设置server_id,注意要唯一
server-id=101  
## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用
log-bin=mysql-slave-bin   
## relay_log配置中继日志
relay_log=edu-mysql-relay-bin
</code></pre>
<ol start="2">
<li>重启mysql服务跟docker容器</li>
<li>进入Slave数据库，执行主从同步命令；</li>
</ol>
<pre><code>change master to master_host='172.17.0.2', master_user='slave', master_password='123456', master_port=3306, master_log_file='mysql-bin.000001', master_log_pos= 617, master_connect_retry=30;  #   master_host='docker独立ip' ；
master_user='主库创建的同步帐号'；master_password='同步帐号密码'；master_port=mysql主库端口；master_log_file='主库File字段名'；master_log_pos= Position字段；master_connect_retry=重连时间

show slave status \G;   #查看主从同步状态
start slave  #启动主从同步功能
</code></pre>
<blockquote>
<pre><code>   SlaveIORunning 和 SlaveSQLRunning 都是Yes，说明主从复制已经开启。此时可以测试数据同步是否成功。
</code></pre>
</blockquote>
<h2 id="进阶">进阶</h2>
<ol>
<li>创建主库</li>
</ol>
<pre><code>docker run -itd -p 3308:3306 --name master -v /master/var/mysql:/var/lib/mysql -v /master/conf/:/etc/mysql/ -v /etc/localtime:/etc/localtime:ro  -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7
</code></pre>
<ol start="2">
<li>创建从库</li>
</ol>
<pre><code>docker run -itd -p 3309:3306 --name slave -v /slave/var/mysql:/var/lib/mysql -v /slave/conf/:/etc/mysql/ -v /etc/localtime:/etc/localtime:ro  -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7
</code></pre>
<p>**注意：**因数据库版本不同，所有些并不会立即启动，需写配置文件才可启动。5.7经测试会立即启动。<br>
3. 主从配置文件夹中创建配置文件 <code>my.cnf</code>。</p>
<pre><code>#主库配置如下：
cd /master/conf/ 
touch my.cnf
vim my.cnf
[mysqld]
lower_case_table_names=1
wait_timeout=30
sql_mode=STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
max_allowed_packet= 1024M
group_concat_max_len = 1024M
thread_cache_size=64   
max_connections=160000   #设置最大的连接数
server-id=1001   ##设置server_id,注意要唯一
transaction-isolation = READ-COMMITTED
auto-increment-increment = 1
auto-increment-offset = 1
slave-skip-errors = all  #忽略一些错误
binlog-ignore-db=mysql
binlog-ignore-db=test1  #不同步给从库的库test1
log-bin = mysql-bin  #开启二进制日志功能，以备Slave作为其它Slave的Master时使用
binlog-do-db=test  #需要复制给从库的库
!includedir /etc/mysql/   #***主要：此路径是docker内的配置文件放置路径，也就是刚刚启动映射的配置文件路径
# 从库配置如下：
[mysqld]
lower_case_table_names=1
wait_timeout=30
sql_mode=STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
max_allowed_packet= 1024M
group_concat_max_len = 1024M
thread_cache_size=64
max_connections=10000
server-id=1002
replicate-do-db=test    #从库需要复制的库
replicate-ignore-db=test1    #从库需要忽略同步的库
log-slave-updates    #一主多从必写的配置
log-bin = mysql-bin  #开启二进制日志功能，以备Slave作为其它Slave的Master时使用
auto-increment-increment = 1
auto-increment-offset = 1
slave-skip-errors = all  
slave-net-timeout=60   #这是slave60秒超时会重连
!includedir /etc/mysql/
</code></pre>
<ol start="4">
<li>重启启动主从库</li>
</ol>
<pre><code>docker restart master
docker restart slave
</code></pre>
<ol start="5">
<li>接下来主从库操作可参考入门步骤3，大同。</li>
</ol>
<h2 id="参考连接">参考连接</h2>
<p><a href="%22https://www.bbsmax.com/A/KE5Qg9DqzL/%22">slave启动失败解决方案一</a><br>
<a href="%22https://www.cnblogs.com/gczheng/p/10140095.html%22">slave启动失败解决方案二</a>——<code>清理slave同步信息</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea疑难杂症]]></title>
        <id>https://student-party.github.io//post/gridea-de-yi-nan-za-zheng</id>
        <link href="https://student-party.github.io//post/gridea-de-yi-nan-za-zheng">
        </link>
        <updated>2019-10-28T05:35:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="windows连接失败">windows连接失败</h2>
<p><strong>注意：</strong> 安装git，并重启，不然会一直连接失败，无法同步。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://student-party.github.io//post/hello-gridea</id>
        <link href="https://student-party.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>