<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://student-party.github.io/</id>
    <title>Gridea</title>
    <updated>2019-11-22T03:30:53.040Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://student-party.github.io/"/>
    <link rel="self" href="https://student-party.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://student-party.github.io//images/avatar.png</logo>
    <icon>https://student-party.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Centos一次创建多个目录]]></title>
        <id>https://student-party.github.io//post/centos-yi-ci-chuang-jian-duo-ge-mu-lu</id>
        <link href="https://student-party.github.io//post/centos-yi-ci-chuang-jian-duo-ge-mu-lu">
        </link>
        <updated>2019-11-22T03:23:50.000Z</updated>
        <content type="html"><![CDATA[<p>Linux中创建目录当然使用命令工具mkdir == （make directory）</p>
<pre><code>mkdir dir1 dir2 dir3

#如果你想在子目录中创建目录，可以这样：

mkdir src src/dir1 src/dir2 src/dir3

#显然上面的方法太笨了
#我们可以这样：

mkdir src src/{dir1,dir2,dir3}

#最好的方式：这个-p参数是不存在父目录就建立它

mkdir -p dir33/{dir1,dir2,dir3}

#更多mkdir的使用请输入：mkdir --help

#这样就好了，是不是很棒
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker报错]]></title>
        <id>https://student-party.github.io//post/docker-bao-cuo</id>
        <link href="https://student-party.github.io//post/docker-bao-cuo">
        </link>
        <updated>2019-11-12T09:04:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题一">问题一</h2>
<p>创建容器的时候报错WARNING: IPv4 forwarding is disabled. Networking will not work.<br>
解决办法：</p>
<pre><code>vim  /usr/lib/sysctl.d/00-system.conf
# 添加如下代码：
net.ipv4.ip_forward=1
#重启network服务
systemctl restart network
</code></pre>
<p>完成以后，删除错误的容器，再次创建新容器，就不再报错了。</p>
<h2 id="问题二">问题二</h2>
<p>启动docker的时候防火墙已放开端口却还是无法访问，关闭防火墙可以访问。<br>
解决版本：</p>
<ol>
<li>关闭selinux</li>
<li>Docker启动的时候加入<code>--privileged</code>参数<br>
完成以上操作基本解决此问题。</li>
</ol>
<h2 id="问题四">问题四</h2>
<p>Docker批量删除none镜像</p>
<ol>
<li>先停止带none的镜像容器<pre><code>docker stop $(docker ps -a | grep &quot;Exited&quot; | awk '{print $1 }')  #停止容器
</code></pre>
</li>
<li>删除容器<pre><code>docker rm $(docker ps -a | grep &quot;Exited&quot; | awk '{print $1 }')  #删除容器 
</code></pre>
</li>
<li>删除镜像<pre><code>docker rmi $(docker images | grep &quot;none&quot; | awk '{print $3}')  #删除镜像
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[学习小技能汇总]]></title>
        <id>https://student-party.github.io//post/xue-xi-xiao-ji-neng-hui-zong</id>
        <link href="https://student-party.github.io//post/xue-xi-xiao-ji-neng-hui-zong">
        </link>
        <updated>2019-11-04T02:26:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="windows">Windows</h1>
<h2 id="域导出用户名单">域导出用户名单</h2>
<h3 id="命令">命令</h3>
<pre><code> csvde -f export.csv #csvde 为命令，-f为参数，输出为export.csv文件
</code></pre>
<p>输出文件默认在用户文件夹下。</p>
<h2 id="win10多用户远程桌面">win10多用户远程桌面</h2>
<p>以下为必要步骤需先进行组策略设置，完成后再选择方法1或2(推荐方法2)：</p>
<h3 id="配置本地组策略">配置本地组策略</h3>
<ol>
<li>
<p>win10 左下角搜索栏中 输入<mark>gpedit</mark>打开本地组策略编辑器</p>
</li>
<li>
<p>选择【管理模板】-&gt;【Windows组件】-&gt;【远程桌面服务】-&gt;【远程桌面会话主机】-&gt;【连接】<br>
<img src="https://img-blog.csdnimg.cn/2018110418264960.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDgyMTkxMw==,size_16,color_FFFFFF,t_70" alt="image"></p>
</li>
<li>
<p>配置 【限制连接的数量】，允许的RD最大连接数 即为最大的连接数量<br>
<img src="https://img-blog.csdnimg.cn/20181104182704781.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDgyMTkxMw==,size_16,color_FFFFFF,t_70" alt="image"></p>
</li>
<li>
<p>配置【将远程桌面服务用户限制到单独的远程桌面服务会话】，改成 “已禁用”<br>
<img src="https://img-blog.csdnimg.cn/20181104182715954.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDgyMTkxMw==,size_16,color_FFFFFF,t_70" alt="image"></p>
</li>
</ol>
<h4 id="方法一">方法一</h4>
<p>Win10远程桌面多用户补丁</p>
<p>下载Win10远程桌面多用户补丁(termsrv.dll)，然后解压得到dll文件替换c:\windows\system32\下的同名文件即可，如果需要权限，可使用U盘启动或系统安装盘启动进入命令行或WinPE中进行覆盖。</p>
<h4 id="方法二">方法二</h4>
<p>使用工具破解</p>
<p>下载RDPWrap-v1.6小工具，然后解压，运行install.bat，然后运行RDPConfig.exe，看到Diagnostics后面都是绿色的，并且Listener state是Listening [fully supported]。</p>
<p>如果全绿则破解成功；如果出现Listening [not supported]则需运行update.bat,如运行之后还出现此报错则需手动更新rdpwrap.ini。</p>
<ol>
<li>下载对应的service state 版本rdpwrap.ini</li>
<li>管理员运行cmd，并停止<br>
termservice 服务</li>
</ol>
<pre><code>net stop termservice
</code></pre>
<ol start="3">
<li>替换 <mark>C：\ Program Files \ RDP Wrapper \ rdpwrap.ini</mark></li>
<li>启动 termservice服务</li>
</ol>
<pre><code>net start termservice
</code></pre>
<ol start="5">
<li>最后运行RDPConfig.exe，全绿大功告成。</li>
</ol>
<h3 id="注意">注意</h3>
<p>使用工具破解<br>
补充说明：修改过termsrv.dll的自己改回来。</p>
<h3 id="参考资料">参考资料</h3>
<ol>
<li>https://download.csdn.net/download/sdlp99/10953187</li>
<li>http://www.infopackets.com/news/10552/how-update-rdpwrapini-rdp-wrapper</li>
<li>https://blog.csdn.net/weixin_40821913/article/details/83718404</li>
<li>https://github.com/stascorp/rdpwrap/issues/744</li>
<li>https://github.com/stascorp/rdpwrap/releases</li>
</ol>
<h1 id="linux">Linux</h1>
<h2 id="ubuntu被远程">Ubuntu被远程</h2>
<blockquote>
<p>此方法采用的xrdp原生方案，优点兼容性比较好。</p>
</blockquote>
<ol>
<li>安装xrdp</li>
</ol>
<pre><code>sudo apt install xrdp #最高权限安装xrdp
</code></pre>
<ol start="2">
<li>修改配置</li>
</ol>
<pre><code>nano /etc/xrdp/startwm.sh   #使用nano命令编辑'startwm.sh' 
</code></pre>
<ol start="3">
<li>把最下面的test和exec两行注释掉，添加一行'gnome-session',配置文件参考如下：</li>
</ol>
<pre><code>#!/bin/sh
# xrdp X session start script (c) 2015, 2017 mirabilos
# published under The MirOS Licence

if test -r /etc/profile; then
        . /etc/profile
fi

if test -r /etc/default/locale; then
        . /etc/default/locale
        test -z &quot;${LANG+x}&quot; || export LANG
        test -z &quot;${LANGUAGE+x}&quot; || export LANGUAGE
        test -z &quot;${LC_ADDRESS+x}&quot; || export LC_ADDRESS
        test -z &quot;${LC_ALL+x}&quot; || export LC_ALL
        test -z &quot;${LC_COLLATE+x}&quot; || export LC_COLLATE
        test -z &quot;${LC_CTYPE+x}&quot; || export LC_CTYPE
        test -z &quot;${LC_IDENTIFICATION+x}&quot; || export LC_IDENTIFICATION
        test -z &quot;${LC_MEASUREMENT+x}&quot; || export LC_MEASUREMENT
        test -z &quot;${LC_MESSAGES+x}&quot; || export LC_MESSAGES
        test -z &quot;${LC_MONETARY+x}&quot; || export LC_MONETARY
        test -z &quot;${LC_NAME+x}&quot; || export LC_NAME
        test -z &quot;${LC_NUMERIC+x}&quot; || export LC_NUMERIC
        test -z &quot;${LC_PAPER+x}&quot; || export LC_PAPER
        test -z &quot;${LC_TELEPHONE+x}&quot; || export LC_TELEPHONE
        test -z &quot;${LC_TIME+x}&quot; || export LC_TIME
        test -z &quot;${LOCPATH+x}&quot; || export LOCPATH
fi

if test -r /etc/profile; then
        . /etc/profile
fi
#test -x /etc/X11/Xsession &amp;&amp; exec /etc/X11/Xsession
#exec /bin/sh /etc/X11/Xsession
gnome-session

</code></pre>
<ol start="4">
<li>重启xrdp服务或者机子重启</li>
</ol>
<pre><code>service xrdp restart  #重启xrdp服务
</code></pre>
<h3 id="xrdp的配置">xrdp的配置</h3>
<blockquote>
<p>文档在/etc/xrdp目录下的xrdp.ini和sesman.ini<br>
xrdp.ini 关键部分在globals</p>
</blockquote>
<pre><code>[globals]
bitmap_cache=yes #位图缓存
bitmap_compression=yes #位图压缩
port=3389 #监听端口
crypt_level=low #加密程度（low为40位，high为128位，medium为双40位）
channel_code=1 #不知道是什么
</code></pre>
<p>sesman.ini</p>
<pre><code>[Globals]
ListenAddress=127.0.0.1 #监听ip地址(默认即可)
ListenPort=3350 #监听端口(默认即可)
EnableUserWindowManager=1 #1为开启,可让用户自定义自己的启动脚本
UserWindowManager=startwm.sh
DefaultWindowManager=startwm.sh

[Security]
AllowRootLogin=1 #允许root登陆
MaxLoginRetry=4 #最大重试次数
TerminalServerUsers=tSUSErs #允许连接的用户组(如果不存在则默认全部用户允许连接)?
TerminalServerAdmins=tsadmins #允许连接的超级用户(如果不存在则默认全部用户允许连接)?

[Sessions]
MaxSessions=10 #最大会话数
KillDisconnected=0 #是否立即关闭断开的连接(如果为1,则断开连接后会自动注销)
IdleTimeLimit=0 #空闲会话时间限制(0为没有限制)
DisconnectedTimeLimit=0 #断开连接的存活时间(0为没有限制)

[Logging]
LogFile=./sesman.log #登陆日志文件
LogLevel=DEBUG #登陆日志记录等级(级别分别为,core,error,warn,info,debug)
EnableSyslog=0 #是否开启日志
SyslogLevel=DEBUG #系统日志记录等级
</code></pre>
<h3 id="注意-2">注意</h3>
<blockquote>
<p>因Ubuntu root账号默认无法登陆需修改，所远程之前建议先开启此功能。开启方法可看《<a href="https://blog.csdn.net/yulinxx/article/details/94767231">Ubuntu修改root默认登陆</a>》</p>
</blockquote>
<h2 id="ubuntu修改root默认登陆">Ubuntu修改root默认登陆</h2>
<h3 id="第一步">第一步</h3>
<p>首先登录系统，创建root用户的密码<br>
在终端输入命令：</p>
<pre><code>sudo passwd root
</code></pre>
<p>然后输入设置的密码，这样就完成了设置root用户密码的步骤</p>
<h3 id="第二步">第二步</h3>
<blockquote>
<p>修改文件</p>
</blockquote>
<pre><code>sudo nano /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf   #管理员nano命令编辑'50-ubuntu.conf'
</code></pre>
<blockquote>
<p>在文件末尾增加如下两行：</p>
</blockquote>
<pre><code>greeter-show-manual-login=true'
all-guest=false 
</code></pre>
<blockquote>
<p>如下：</p>
</blockquote>
<pre><code>[Seat:*]
user-session=ubuntu
greeter-show-manual-login=true 
all-guest=false
</code></pre>
<h3 id="第三步">第三步</h3>
<blockquote>
<p>修改 /etc/pam.d/gdm-autologin和 /etc/pam.d/gdm-password 文件</p>
</blockquote>
<pre><code>sudo nano /etc/pam.d/gdm-autologin  #管理员nano编辑'gdm-autologin'文件
</code></pre>
<blockquote>
<p>注释掉auth required pam_succeed_if.so user != root quiet_success这一行(第三行左右)</p>
</blockquote>
<blockquote>
<p>文件配置可参考以下：</p>
</blockquote>
<pre><code>#%PAM-1.0
auth    requisite       pam_nologin.so
#auth   required        pam_succeed_if.so user != root quiet_success
auth    optional        pam_gdm.so
auth    optional        pam_gnome_keyring.so
auth    required        pam_permit.so
@include common-account
# SELinux needs to be the first session rule. This ensures that any 
# lingering context has been cleared. Without this it is possible 
# that a module could execute code in the wrong domain.
session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so cl$
session required        pam_loginuid.so
# SELinux needs to intervene at login time to ensure that the process
# starts in the proper default security context. Only sessions which are
# intended to run in the user's context should be run after this.
session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so op$
session optional        pam_keyinit.so force revoke
session required        pam_limits.so
session required        pam_env.so readenv=1
session required        pam_env.so readenv=1 user_readenv=1 envfile=/etc/default/locale
@include common-session
session optional        pam_gnome_keyring.so auto_start
@include common-password
</code></pre>
<pre><code>sudo nano /etc/pam.d/gdm-password  #管理员nano编辑'gdm-password'文件
</code></pre>
<blockquote>
<p>注释掉 auth required pam_succeed_if.so user != root quiet_success这一行(第三行左右)<br>
文件配置可参考以下：</p>
</blockquote>
<pre><code>#%PAM-1.0
auth    requisite       pam_nologin.so
#auth   required        pam_succeed_if.so user != root quiet_success
@include common-auth
auth    optional        pam_gnome_keyring.so
@include common-account
# SELinux needs to be the first session rule. This ensures that any 
# lingering context has been cleared. Without this it is possible 
# that a module could execute code in the wrong domain.
session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so cl$
session required        pam_loginuid.so
# SELinux needs to intervene at login time to ensure that the process
# starts in the proper default security context. Only sessions which are
# intended to run in the user's context should be run after this.
session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so op$
session optional        pam_keyinit.so force revoke
session required        pam_limits.so
session required        pam_env.so readenv=1
session required        pam_env.so readenv=1 user_readenv=1 envfile=/etc/default/locale
@include common-session
session optional        pam_gnome_keyring.so auto_start
@include common-password
</code></pre>
<h3 id="第四步">第四步</h3>
<p>修改/root/.profile文件</p>
<pre><code>sudo nano /root/.profile   #管理员nano编辑'.profile'文件
</code></pre>
<p>将文件末尾的<mark>mesg n || true</mark>这一行修改成<br>
<mark>tty -s&amp;&amp;mesg n || true</mark></p>
<blockquote>
<p>文件配置可参考以下：</p>
</blockquote>
<pre><code># ~/.profile: executed by Bourne-compatible login shells.

if [ &quot;$BASH&quot; ]; then
  if [ -f ~/.bashrc ]; then
    . ~/.bashrc
  fi
fi

tty -s&amp;&amp;mesg n || true
#mesg n || true

</code></pre>
<h3 id="第五步">第五步</h3>
<pre><code>sudo gedit /etc/ssh/sshd_config   #管理员nano编辑'sshd_config'文件
</code></pre>
<p>在 <mark>#PermitRootLogin prohibit-password</mark><br>
下添加：<mark>PermitRootLogin yes</mark></p>
<blockquote>
<p>文件配置可参考以下：</p>
</blockquote>
<pre><code>#       $OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and keying
#RekeyLimit default none

# Logging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
#PermitRootLogin prohibit-password
</code></pre>
<h3 id="最后重启系统">最后重启系统</h3>
<h2 id="docker安装stf">Docker安装STF</h2>
<p><strong>注意：</strong></p>
<blockquote>
<p>以下操作是在Centos7下执行并测试完毕</p>
</blockquote>
<h3 id="安装docker">安装docker</h3>
<blockquote>
<p>已安装的可略过此步</p>
</blockquote>
<pre><code>#step1：yum更新
yum -y update
#step2：yum命令进行安装docker
yum install -y docker #备注：-y 表示不询问 使用默认配置进行安装，等待提示  完毕！
#step3：查看是否安装成功
yum list installed | grep docker
#step4:docker启动
systemctl start docker
#step5:查看docker状态
systemctl status docker
#step6:docker设置开机启动
systemctl enable docker

</code></pre>
<h3 id="selinux设置">selinux设置</h3>
<blockquote>
<p>注意：此步骤非常重要，如不关闭。后面rethinkdb数据库启动不了。</p>
</blockquote>
<pre><code>[root@localhost ~]# cat /etc/selinux/config 

# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
#SELINUX=enforcing
SELINUX=disabled
# SELINUXTYPE= can take one of three values:
#     targeted - Targeted processes are protected,
#     minimum - Modification of targeted policy. Only selected processes are protected. 
#     mls - Multi Level Security protection.
SELINUXTYPE=targeted
</code></pre>
<p>配置参考如上，修改完后需重启才生效。</p>
<h3 id="拉取镜像">拉取镜像</h3>
<pre><code>docker pull openstf/stf:latest  #拉取STF镜像
docker pull sorccu/adb:latest 	#拉取adb 镜像
docker pull rethinkdb:latest 	#拉取rethinkdb 镜像
docker images # 查看docker已下镜像
</code></pre>
<blockquote>
<p><strong>注意</strong>：docker下载慢可配置国内镜像加速，登录<a href="https:/://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云</a><br>
申请加速地址，然后配置 <mark>/etc/docker/daemon.json</mark>  文件。</p>
</blockquote>
<h3 id="镜像安装并启动">镜像安装并启动</h3>
<blockquote>
<p>注意先后顺序。</p>
</blockquote>
<pre><code>#step1：安装并rethinkdb
docker run -d --name rethinkdb -v /srv/rethinkdb:/data --net host rethinkdb rethinkdb --bind all --cache-size 8192 --http-port 8090 
#step2：安装并启动adb
docker run -d --name adbd --privileged -v /dev/bus/usb:/dev/bus/usb --net host sorccu/adb:latest
#step3：安装并启动STF
docker run -d --name stf --net host openstf/stf stf local --public-ip 192.168.164.100

</code></pre>
<p><a href="https://blog.csdn.net/xuecancan/article/details/79897247">参考链接</a></p>
<h3 id="开放端口">开放端口</h3>
<blockquote>
<p>注意：在以上服务都起来的情况下，还是访问不了192.168.164.100:7100 web端情况下可关闭防火墙尝试下。如可访问，那可通过如下操作。</p>
</blockquote>
<pre><code>#step1：查看已经开放的端口
firewall-cmd --list-ports 
#step2:开启端口
firewall-cmd --zone=public --add-port=80/tcp --permanent  
#命令含义:
# –zone #作用域
# –add-port=80/tcp #添加端口，格式为：端口/通讯协议
# –permanent #永久生效，没有此参数重启后失效
#step3:开启端口后需重启防火墙
firewall-cmd --reload

</code></pre>
<p>防火墙其他命令：</p>
<pre><code>#停止firewall  
systemctl stop firewalld.service  
#禁止firewall开机启动  
systemctl disable firewalld.service
</code></pre>
<h4 id="测试完毕">测试完毕</h4>
<figure data-type="image" tabindex="1"><img src="http://ww1.sinaimg.cn/large/d7eb80f7ly1g6nrrsmzhej21hb0s9wfj.jpg" alt="Snipaste_2019-09-04_20-41-50.png"></figure>
<h2 id="更新yum源">更新yum源</h2>
<blockquote>
<p>以下操作在centos设置并操作完毕。</p>
</blockquote>
<ul>
<li><strong>Step1：</strong> 下载镜像源文件</li>
</ul>
<pre><code>wget http://mirrors.aliyun.com/repo/Centos-7.repo #下载阿里云yum镜像源文件
</code></pre>
<blockquote>
<p>如下载不下来可先下载然后通过xftp上传到指定目录。</p>
</blockquote>
<ul>
<li><strong>Step2:</strong> 备份原有源</li>
</ul>
<pre><code>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak #备份原有源
</code></pre>
<ul>
<li><strong>Step3</strong>：将阿里云源文件移到指定目录</li>
</ul>
<pre><code>cp 目录/下载文件名  /etc/yum.repos.d/CentOS-Base.repo #将下载文件拷贝到' /etc/yum.repos.d/'目录下
</code></pre>
<ul>
<li><strong>Step4</strong>：清理yum缓存</li>
</ul>
<pre><code>yum clean all
</code></pre>
<ul>
<li><strong>Step5</strong>：重建缓存</li>
</ul>
<pre><code>yum makecache 
</code></pre>
<ul>
<li><strong>Step6</strong>：更新yum</li>
</ul>
<pre><code>yum -y update
</code></pre>
<h2 id="centos7安装python3">Centos7安装python3</h2>
<h3 id="安装依赖环境">安装依赖环境</h3>
<pre><code>yum install libffi-devel -y
</code></pre>
<blockquote>
<p>注：以下环境必装，不然make install会报错</p>
</blockquote>
<pre><code> yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make
</code></pre>
<hr>
<h3 id="下载安装包并解压">下载安装包并解压</h3>
<pre><code>wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz
</code></pre>
<pre><code>tar -zxvf Python-3.7.0.tgz
</code></pre>
<hr>
<h3 id="安装python3">安装Python3</h3>
<pre><code>cd Python-3.7.0
./configure   # ？？待详解
make
make install
</code></pre>
<h3 id="测试">测试</h3>
<p>输入<mark>python3</mark>,查看是否是以正确显示环境。然后输入<mark>python</mark>查看版本号，如是2版本做以下操作。</p>
<h4 id="python默认版本修改">Python默认版本修改</h4>
<p>首先输入以下命令查看链接状况：</p>
<pre><code>ls -l /usr/bin/python*
</code></pre>
<p>或者</p>
<pre><code> ls -al /usr/bin | grep python
</code></pre>
<p>输出如下：</p>
<pre><code>lrwxrwxrwx  1 root root   22 Jul 24 20:56 /usr/bin/python -&gt; python2
lrwxrwxrwx. 1 root root    9 Aug 18  2017 /usr/bin/python2 -&gt; python2.7
-rwxr-xr-x. 1 root root 7136 Nov  6  2016 /usr/bin/python2.7
lrwxrwxrwx  1 root root   22 Jul 24 20:45 /usr/bin/python3 -&gt; /usr/local/bin/python3
lrwxrwxrwx  1 root root   24 Jul 24 20:47 /usr/bin/python3.7 -&gt; /usr/local/bin/python3.7
</code></pre>
<p>由输出结果链接情况可知,在控制台中输入python和python2进入python2.7版本,<br>
输入python3进入python3版本.<br>
现在需要将第一个文件删除,然后把python3软链接到该目录下:</p>
<pre><code>rm -rf /usr/bin/python
ln -s /usr/local/bin/python3 /usr/bin/python  #注意目录，不知目录的可用which命令查询
</code></pre>
<p>修改后为以下结果：</p>
<pre><code>lrwxrwxrwx  1 root root   22 Jul 24 20:56 /usr/bin/python -&gt; /usr/local/bin/python3
lrwxrwxrwx. 1 root root    9 Aug 18  2017 /usr/bin/python2 -&gt; python2.7
-rwxr-xr-x. 1 root root 7136 Nov  6  2016 /usr/bin/python2.7
lrwxrwxrwx  1 root root   22 Jul 24 20:45 /usr/bin/python3 -&gt; /usr/local/bin/python3
lrwxrwxrwx  1 root root   24 Jul 24 20:47 /usr/bin/python3.7 -&gt; /usr/local/bin/python3.7
</code></pre>
<h4 id="yum配置环境更新">yum配置环境更新</h4>
<p>首先查找yum路径</p>
<pre><code>which yum
</code></pre>
<p>编辑yum配置</p>
<pre><code>vim /usr/bin/yum
</code></pre>
<p>将 <mark>#!/usr/bin/python</mark> 修改为 <mark>#!/usr/bin/python2</mark>。</p>
<h3 id="注意-3">注意</h3>
<blockquote>
<p>注：<br>
如果是安装指定目录则需作以下操作：</p>
</blockquote>
<ol>
<li>进入解压目录</li>
</ol>
<pre><code>cd Python-3.7.0
</code></pre>
<ol start="2">
<li>配置安装目录</li>
</ol>
<pre><code>./configure --prefix=/usr/local/python3  #将python安装到/usr/local/python3
</code></pre>
<ol start="3">
<li>编译，安装</li>
</ol>
<pre><code>make
make install
</code></pre>
<ol start="4">
<li>建立软连接</li>
<li>需将python3路径加入PATH环境变量</li>
</ol>
<pre><code>vim ~/.bash_profile
</code></pre>
<p>在此页面中加入以下内容：</p>
<pre><code>export PATH=$PATH:$HOME/bin:/usr/local/python3/bin
</code></pre>
<p>保存退出。</p>
<h3 id="参考资料-2">参考资料</h3>
<ol>
<li>https://www.jianshu.com/p/1193b1dbaf95</li>
<li>https://blog.csdn.net/edogawachia/article/details/96975093</li>
<li>https://blog.csdn.net/qq_36288025/article/details/82534508</li>
<li>https://blog.csdn.net/weixin_33753003/article/details/92302062</li>
<li>https://blog.csdn.net/zhangdongren/article/details/82685932</li>
</ol>
<h3 id="用到的命令">用到的命令</h3>
<blockquote>
<p><mark>which</mark>  ;  <mark>rm</mark> ; <mark>vim</mark> ; <mark>ls</mark> ; <mark>./configure</mark>  <strong>？？？详解</strong><br>
; <mark>**make</mark> ; <mark>ln -s</mark> ; <mark>ls</mark> ; <mark>yum</mark> ; <mark>tar</mark> ; <mark>cd</mark> ; <mark>wget</mark> ;</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[待归档]]></title>
        <id>https://student-party.github.io//post/dai-gui-dang</id>
        <link href="https://student-party.github.io//post/dai-gui-dang">
        </link>
        <updated>2019-10-31T08:20:28.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<!-- more -->
<p>陈意: fastdfs存储文件系统部署  参考   https://blog.csdn.net/wufewu/article/details/84801600<br>
陈意: docker下的主从配置    文档：008--Docker搭建 MySQL.note<br>
链接：http://note.youdao.com/noteshare?id=54ed599f897aa62dfb5a1b70a7d0e477&amp;sub=00D749EED87A4E9BBD4E0DA3D2A0CA05</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CMD修改编码]]></title>
        <id>https://student-party.github.io//post/cmd-xiu-gai-bian-ma</id>
        <link href="https://student-party.github.io//post/cmd-xiu-gai-bian-ma">
        </link>
        <updated>2019-10-31T08:13:21.000Z</updated>
        <content type="html"><![CDATA[<pre><code>chcp 65001  #修改为UTF-8编码
</code></pre>
<p>编码参数可参考:<a href="https://blog.csdn.net/iway_lch/article/details/50408796">点我</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Navicat12.1.8长期试用版]]></title>
        <id>https://student-party.github.io//post/navicat1218-chang-qi-shi-yong-ban</id>
        <link href="https://student-party.github.io//post/navicat1218-chang-qi-shi-yong-ban">
        </link>
        <updated>2019-10-31T01:59:59.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="首先">首先</h2>
<ol>
<li>安装Navicat，可官网直接下载安装</li>
<li>下载秘钥生成器：<a href="https://pan.baidu.com/s/1h3Vzv-OEgeKweOBq-tAH9Q%22">点我</a></li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h2 id="首先">首先</h2>
<ol>
<li>安装Navicat，可官网直接下载安装</li>
<li>下载秘钥生成器：<a href="https://pan.baidu.com/s/1h3Vzv-OEgeKweOBq-tAH9Q%22">点我</a></li>
</ol>
<!-- more -->
<h2 id="然后">然后</h2>
<ol>
<li>打开激活器</li>
<li>点击patch——指定软件安装路径</li>
<li>点击Generate<br>
<img src="http://file.happyjava.cn/picgo/20190605232956.png" alt=""></li>
<li>打开Navicat，复制注册码——粘贴——手动激活——复制请求代码——Generate——回到Navicat——完成<br>
<img src="http://file.happyjava.cn/picgo/20190605233035.png" alt=""><br>
<strong>注意</strong>：激活失败需卸载并将文件删除干净后重复以上操作即可</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于docker的主从库搭建]]></title>
        <id>https://student-party.github.io//post/ji-yu-docker-de-zhu-cong-ku-da-jian</id>
        <link href="https://student-party.github.io//post/ji-yu-docker-de-zhu-cong-ku-da-jian">
        </link>
        <updated>2019-10-28T09:38:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="入门">入门</h2>
<p>基于Docker的Mysql主从复制搭建</p>
<ol>
<li>首先安装docker</li>
<li>拉取mysql镜像：5.7版本</li>
<li>启动主从数据库容器</li>
</ol>
<pre><code>docker run -p 3339:3306 --name Maste -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7  # Master(主库)
docker run -p 3340:3306 --name Slave -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7   # Slave(从库)
</code></pre>
<p>启动后用可用数据库软件测试一下是否连通。</p>
<ul>
<li>配置Master</li>
</ul>
<ol>
<li>Master配置文件修改</li>
</ol>
<pre><code>docker exec -it 容器名 /bin/bash  #进入主库docker
apt-get update   #更新安装源
apt-get install -y vim   #安装vim
vim  /etc/mysql/my.cnf   #编辑my.cnf配置文件


[mysqld]
## 同一局域网内注意要唯一
server-id=100  
## 开启二进制日志功能，可以随便取（关键）
log-bin=mysql-bin
</code></pre>
<ol start="2">
<li>重启mysql容器。</li>
<li>进入主库创建数据库同步用户，并授予REPLICATION SLAVE权限和REPLICATION CLIENT权限，用于主从之间同步数据。</li>
</ol>
<pre><code>docker exec -it 主库容器名 /bin/bash  # 进入主库docker
mysql -uroot帐号  -p用户密码   # 登录入mysql
CREATE USER 'slave'@'%' IDENTIFIED BY '123456';   #创建用户名“slave”，密码“123456”的数据库用户。
GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';   #授予用户 slave REPLICATION SLAVE权限和REPLICATION CLIENT权限
</code></pre>
<ol start="4">
<li>查看File、Position字段值,并记录下来</li>
</ol>
<pre><code>show master status;
+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000001 |      617 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
</code></pre>
<ul>
<li>配置Slave</li>
</ul>
<ol>
<li>Slave配置文件修改</li>
</ol>
<pre><code>docker exec -it 容器名 /bin/bash  #
apt-get update
apt-get install -y vim
vim  /etc/mysql/my.cnf

[mysqld]
## 设置server_id,注意要唯一
server-id=101  
## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用
log-bin=mysql-slave-bin   
## relay_log配置中继日志
relay_log=edu-mysql-relay-bin
</code></pre>
<ol start="2">
<li>重启mysql服务跟docker容器</li>
<li>进入Slave数据库，执行主从同步命令；</li>
</ol>
<pre><code>change master to master_host='172.17.0.2', master_user='slave', master_password='123456', master_port=3306, master_log_file='mysql-bin.000001', master_log_pos= 617, master_connect_retry=30;  #   master_host='docker独立ip' ；
master_user='主库创建的同步帐号'；master_password='同步帐号密码'；master_port=mysql主库端口；master_log_file='主库File字段名'；master_log_pos= Position字段；master_connect_retry=重连时间

show slave status \G;   #查看主从同步状态
start slave  #启动主从同步功能
</code></pre>
<blockquote>
<pre><code>   SlaveIORunning 和 SlaveSQLRunning 都是Yes，说明主从复制已经开启。此时可以测试数据同步是否成功。
</code></pre>
</blockquote>
<h2 id="进阶">进阶</h2>
<ol>
<li>创建主库</li>
</ol>
<pre><code>docker run -itd -p 3308:3306 --name master -v /master/var/mysql:/var/lib/mysql -v /master/conf/:/etc/mysql/ -v /etc/localtime:/etc/localtime:ro  -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7
</code></pre>
<ol start="2">
<li>创建从库</li>
</ol>
<pre><code>docker run -itd -p 3309:3306 --name slave -v /slave/var/mysql:/var/lib/mysql -v /slave/conf/:/etc/mysql/ -v /etc/localtime:/etc/localtime:ro  -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7
</code></pre>
<p>**注意：**因数据库版本不同，所有些并不会立即启动，需写配置文件才可启动。5.7经测试会立即启动。<br>
3. 主从配置文件夹中创建配置文件 <code>my.cnf</code>。</p>
<pre><code>#主库配置如下：
cd /master/conf/ 
touch my.cnf
vim my.cnf
[mysqld]
lower_case_table_names=1
wait_timeout=30
sql_mode=STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
max_allowed_packet= 1024M
group_concat_max_len = 1024M
thread_cache_size=64   
max_connections=160000   #设置最大的连接数
server-id=1001   ##设置server_id,注意要唯一
transaction-isolation = READ-COMMITTED
auto-increment-increment = 1
auto-increment-offset = 1
slave-skip-errors = all  #忽略一些错误
binlog-ignore-db=mysql
binlog-ignore-db=test1  #不同步给从库的库test1
log-bin = mysql-bin  #开启二进制日志功能，以备Slave作为其它Slave的Master时使用
binlog-do-db=test  #需要复制给从库的库
!includedir /etc/mysql/   #***主要：此路径是docker内的配置文件放置路径，也就是刚刚启动映射的配置文件路径
# 从库配置如下：
[mysqld]
lower_case_table_names=1
wait_timeout=30
sql_mode=STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
max_allowed_packet= 1024M
group_concat_max_len = 1024M
thread_cache_size=64
max_connections=10000
server-id=1002
replicate-do-db=test    #从库需要复制的库
replicate-ignore-db=test1    #从库需要忽略同步的库
log-slave-updates    #一主多从必写的配置
log-bin = mysql-bin  #开启二进制日志功能，以备Slave作为其它Slave的Master时使用
auto-increment-increment = 1
auto-increment-offset = 1
slave-skip-errors = all  
slave-net-timeout=60   #这是slave60秒超时会重连
!includedir /etc/mysql/
</code></pre>
<ol start="4">
<li>重启启动主从库</li>
</ol>
<pre><code>docker restart master
docker restart slave
</code></pre>
<ol start="5">
<li>接下来主从库操作可参考入门步骤3，大同。</li>
</ol>
<h2 id="参考连接">参考连接</h2>
<p><a href="https://www.bbsmax.com/A/KE5Qg9DqzL/">slave启动失败解决方案一</a></p>
<p><a href="https://www.cnblogs.com/gczheng/p/10140095.html">slave启动失败解决方案二-清理slave同步信息</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea疑难杂症]]></title>
        <id>https://student-party.github.io//post/gridea-de-yi-nan-za-zheng</id>
        <link href="https://student-party.github.io//post/gridea-de-yi-nan-za-zheng">
        </link>
        <updated>2019-10-28T05:35:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="windows连接失败">windows连接失败</h2>
<p><strong>注意：</strong> 安装git，并重启，不然会一直连接失败，无法同步。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://student-party.github.io//post/hello-gridea</id>
        <link href="https://student-party.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>